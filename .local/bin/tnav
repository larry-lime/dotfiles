#!/bin/zsh

# TODO: Bring back the feature where the session is named as the file name
# TODO: If a session already exists, join it
# TODO: Fix tnav -g feature

export FZF_DEFAULT_OPTS="--color=bg+:#ccd0da,bg:#eff1f5,spinner:#dc8a78,hl:#d20f39 --color=fg:#4c4f69,header:#d20f39,info:#8839ef,pointer:#dc8a78 --color=marker:#dc8a78,fg+:#4c4f69,prompt:#8839ef,hl+:#d20f39"

CONFIG_FILE="$HOME/.local/bin/config_dirs.yaml"

DIRS=()
while IFS= read -r line; do
	DIRS+=("$HOME/$line")
done < <(yq e '.directories[]' $CONFIG_FILE)

# Use a named pipe for fd output
pipe=$(mktemp -u)
mkfifo "$pipe"

# Manipulate the session list
# Cmd+s
session_manager() {
  sesh list --tmux |
    fzf-tmux -p 40%,50%\
    --reverse\
    --exact\
    --no-sort\
    --tiebreak=length\
    --border-label ' Sessions '\
    --prompt '📁 ' \
		--header '  ^d tmux kill' \
		--bind 'tab:down,btab:up' \
		--bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t)' \
		--bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c)' \
		--bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z)' \
		--bind 'ctrl-d:execute(tmux kill-session -t {})+change-prompt(⚡  )+reload(sesh list)'\
}

sesh_nav() {
  local windows=$(tmux list-windows -a -F "#S:#W")
  local sessions=$(sesh list --tmux --config)
  local zoxide_dirs=$(sesh list --zoxide)
  echo -e "$sessions\n$windows\n$zoxide_dirs\n$(fd . "$@" | sd "$HOME" "~")" |
    fzf-tmux -p 40%,50%\
    --reverse\
    --no-sort\
    --tiebreak=length\
    --border-label ' Sesh '\
    --prompt '⚡ ' \
		--header '  ^a all ^t tmux ^g configs ^x zoxide ^f find' \
		--bind 'tab:down,btab:up' \
		--bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list)' \
		--bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t)' \
		--bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c)' \
		--bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z)' \
		--bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)'
}
# Navigate through directories and files in the cmd line
# Ctrl+t
nav() {
  local zoxide_dirs=$(sesh list --zoxide)
  echo -e "$zoxide_dirs\n $(fd . "$@" | awk -v home=$HOME '{gsub(home, "~"); print}')" |
    fzf-tmux -p 40%,50%\
    --reverse\
    --exact\
    --no-sort\
    --border-label ' Tnav '\
    --prompt '🔎 ' \
    --expect "alt-enter,enter"| 
    xargs echo
}

# Navigate through directories and files spawning tmux sessions
# Cmd+k
# Check last argument value.
LAST_ARG="${@:$#}"
RUN_TMUX=false
if [[ $LAST_ARG = "--tmux" ]]; then
	RUN_TMUX=true
fi

# TODO: Change this so that they act differently
if [[ -z $1 ]]; then
	OUTPUT=$(nav "${DIRS[@]}" | sd '~' $HOME)

elif [[ $LAST_ARG =~ ^(--tmux)$ ]]; then
	OUTPUT=$(nav "${DIRS[@]}" | sd '~' $HOME)

# NOTE: When I connect using this, I never open things in an editor
elif [[ $LAST_ARG =~ ^(--sesh)$ ]]; then
  OUTPUT=$(sesh_nav)
  if [[ "$OUTPUT" == *":"* ]]; then
    IFS=':' read -r session window <<< "$OUTPUT"
    sesh connect $session
    tmux select-window -t $window
  else
    sesh connect $OUTPUT
  fi

elif [[ $LAST_ARG =~ ^(--relative|-r)$ ]]; then
  cd "$(fd -t d | fzf-tmux -p 40%,50% --reverse --height=40% --layout=reverse)"

else
	echo "Invalid argument passed"
fi

read -r KEYPRESS BASE_PATH <<<"${OUTPUT}"

if [ -z $BASE_PATH ]; then
	return
fi

BASE_NAME=$(basename $BASE_PATH)
PARENT_PATH=$(dirname $BASE_PATH)
PARENT_NAME=$(basename $PARENT_PATH | tr -d '.')
PATH_IS_DIR=false
PATH_IS_FILE=false
PATH_IS_SESSION=false
SESSION_IS_RUNNING=false
START_TMUX=false


open_session() {
  if [[ "$KEYPRESS" = "enter" ]] || [[ "$KEYPRESS" = "alt-enter" ]]; then
    sesh connect $BASE_PATH
  else
    return
  fi
}


open_directory() {
	if [ "$KEYPRESS" = "enter" ]; then
    zoxide add $BASE_PATH
		if [[ "$RUN_TMUX" = true ]]; then
      sesh connect -c $EDITOR $BASE_PATH
		else
			cd $BASE_PATH && $EDITOR
		fi
	elif [[ "$KEYPRESS" = "alt-enter" ]]; then
    zoxide add $BASE_PATH
		if [[ "$RUN_TMUX" = true ]]; then
      sesh connect $BASE_PATH
		else
			cd $BASE_PATH
		fi
	else
		return
	fi
}

open_file() {
	if [ "$KEYPRESS" = "enter" ]; then
		if [[ "$RUN_TMUX" = true ]]; then
      sesh connect -c "$EDITOR $BASE_NAME" $PARENT_PATH
		else
      cd $PARENT_PATH && $EDITOR $BASE_NAME
		fi
	elif [[ "$KEYPRESS" = "alt-enter" ]]; then
		if [[ "$RUN_TMUX" = true ]]; then
      sesh connect $PARENT_PATH
		else
			cd $PARENT_PATH
		fi
	else
		return
	fi
}

sessions=$(sesh list --tmux)
if echo "$sessions" | rg -q "^$BASE_PATH$"; then
  PATH_IS_SESSION=true
  open_session
elif [ -d $BASE_PATH ]; then
  PATH_IS_DIR=true
  open_directory
else
  PATH_IS_FILE=true
  open_file
fi
