#!/bin/zsh

DIRS=()

while IFS= read -r line; do
    DIRS+=("$HOME/$line")
done < $HOME/.local/bin/tnav_dirs.txt

preview_logic() {
    if [ -d {} ]; then
        exa -T -L 2 --icons --group-directories-first -I 'node_modules' --git-ignore {};
    elif [[ {} == *.pdf ]]; then
        pdftotext -l 10 -nopgbrk -q {} -;
    elif [[ {} == *.docx ]]; then
        textutil -stdout -cat txt {} | bat --style=numbers --color=always --line-range :500;
    else
        bat --style=numbers --color=always --line-range :500 {};
    fi
}

fzf_call() {
    fd . "$@"\
        | fzf\
        --expect "alt-enter,enter,ctrl-g,ctrl-t,ctrl-o"\
        --preview "$(typeset -f preview_logic); preview_logic"\
        | xargs echo
}

# Check last argument value.
LAST_ARG="${@:$#}"

if [[ -z $1 ]] || [[ $LAST_ARG =~ ^(--tmux|-o|--open)$ ]]; then
    OUTPUT=$(fzf_call "${DIRS[@]}")

elif [[ $LAST_ARG =~ ^(-r|--relative)$ ]]; then
    OUTPUT=$(fzf_call "$(pwd)")

elif [[  $1 =~ ^(-p|--path)$ ]]; then
    OUTPUT=$(fzf_call "$2")

elif [[ $LAST_ARG =~ ^(-g|--grep)$ ]]; then
    OUTPUT=$(rg \
            --line-number \
            --no-column \
            --with-filename \
            --no-heading \
            --glob "!.git/*" \
            "." \
            "$grep_name" \
            | awk -F  ":" '{print $1" "$2" "$3}' \
            | fzf\
            --expect "alt-enter,enter" \
            --preview "bat --color always {1} --highlight-line {2}" \
            --preview-window 'right,+{2}+3/3,~3' \
        | xargs echo)
elif [[  ${@:$#} = "-h"  ]] || [[  ${@:$#} = "--help"  ]]; then
    echo "Usage: tnav [OPTION]... [FILE]..."
    return
else # Argument passed is a file or directory path
    echo "Invalid argument passed"
    return
fi

read -r KEYPRESS BASE_PATH <<< "${OUTPUT}"

if [ -z $BASE_PATH ]; then
    return
fi

BASE_NAME=$(basename $BASE_PATH)
PARENT_PATH=$(dirname $BASE_PATH)
PARENT_NAME=$(basename $PARENT_PATH | tr -d '.')
PATH_IS_DIR=false
PATH_IS_FILE=false
PATH_IS_CONFIG=false
SESSION_IS_RUNNING=false

if [[ "$1" = "--open" ]] || [[ "$1" = "-o" ]]; then
    SYS_OPEN=true
fi

start_new_session ()
{
    if [[ "$PATH_IS_DIR" = true ]]; then
        if [[ "$BASE_NAME" = "zsh" ]] || [[ "$BASE_NAME" = "nvim" ]] || [[ "$BASE_NAME" = "tmux" ]]; then
            PATH_IS_CONFIG=true
            tmux new-session -ds "config" -c $BASE_PATH
        else
            tmux new-session -ds $BASE_NAME -c $BASE_PATH
        fi
    elif [[ "$PATH_IS_FILE" = true ]]; then
        tmux new-session -ds $PARENT_NAME -c $PARENT_PATH
    fi
    SESSION_IS_RUNNING=true
}

jump_to_open_session ()
{
    if [[ -z "$TMUX" ]]; then
        tmux attach
    else
        if [[ "$PATH_IS_DIR" = true ]]; then
            if [[ "$PATH_IS_CONFIG" = false ]]; then
                tmux switch-client -t $BASE_NAME
            else
                tmux switch-client -t "config"
            fi
        elif [[ "$PATH_IS_FILE" = true ]]; then
            tmux switch-client -t $PARENT_NAME
        fi
    fi

}

recursive_search ()
{
    if [[ $PATH_IS_DIR ]]; then
        search_path="$BASE_PATH"
        relative_path="$BASE_NAME"
    elif [[ $PATH_IS_FILE ]]; then
        search_path="$PARENT_PATH"
        relative_path="$PARENT_NAME"
    fi

    cd $(dirname $search_path)
    source $HOME/.local/bin/tnav --path $relative_path
}

open_directory ()
{
    if [ "$KEYPRESS" = "enter" ]; then
        if [[ "$SYS_OPEN" = true ]]; then
            cd $BASE_PATH
            open .
            return
        else
            cd $BASE_PATH
            $EDITOR
        fi
    elif [[ "$KEYPRESS" = "alt-enter" ]]; then
        cd $BASE_PATH
    elif [[ "$KEYPRESS" = "ctrl-g" ]]; then
        grep_search
    elif [[ "$KEYPRESS" = "ctrl-t" ]]; then
        recursive_search
    elif [[ "$KEYPRESS" = "ctrl-o" ]]; then
        open $BASE_PATH
    else
        return
    fi
}

open_file ()
{
    if [ "$KEYPRESS" = "enter" ]; then
        if [[ "$SYS_OPEN" = true ]]; then
            open "$BASE_PATH"
            return
        else
            if [[ "binary" == $(file --mime-encoding $BASE_PATH | awk '{print $2}') ]]; then
                open "$BASE_PATH"
            else
                cd $PARENT_PATH
                $EDITOR $BASE_NAME
            fi
        fi
    elif [[ "$KEYPRESS" = "alt-enter" ]]; then
        cd $PARENT_PATH
    elif [[ "$KEYPRESS" = "ctrl-g" ]]; then
        grep_search
    elif [[ "$KEYPRESS" = "ctrl-t" ]]; then
        recursive_search
    elif [[ "$KEYPRESS" = "ctrl-o" ]]; then
        open $BASE_PATH
    else
        return
    fi
}

grep_search () {

    grep_name="$BASE_PATH"
    if [[ "$PATH_IS_DIR" = true ]]; then
        session_name="$BASE_NAME"
    elif [[ "$PATH_IS_FILE" = true ]]; then
        # grep_name="$PARENT_PATH"
        session_name="$PARENT_NAME"
    fi

    output=$(rg \
            --line-number \
            --no-column \
            --with-filename \
            --no-heading \
            --glob "!.git/*" \
            "." \
            "$grep_name" \
            | awk -F  ":" '{print $1" "$2" "$3}' \
            | fzf\
            --expect "alt-enter,enter" \
            --preview "bat --color always {1} --highlight-line {2}" \
            --preview-window 'right,+{2}+3/3,~3' \
        | xargs echo)

    if [ ! -z "$output" ]; then
        return
    fi

    read -r keypress file_path line <<< "${output}"
    line_number=${line%% *}
    parent_path=$(dirname $file_path)

    if [[ "$keypress" = "enter" ]]; then
        $EDITOR -c ":$line_number norm zz" $file_path
    elif [[ "$keypress" = "alt-enter" ]]; then
        if [[ "$parent_path" != "$grep_name" ]]; then
            relative_path=${parent_path#"$grep_name"}
            relative_path="${relative_path:1}"
            cd $relative_path
        fi
    else
        return
    fi
}

if [ -d $BASE_PATH ]; then
    BASE_PATH=${BASE_PATH%?} # Only needed if using fd command
    PATH_IS_DIR=true
    open_directory
else
    PATH_IS_FILE=true
    open_file
fi
